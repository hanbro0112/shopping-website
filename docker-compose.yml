networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.1.0/24
          gateway: 172.18.1.1

services:
  # 開啟兩個服務，模擬分布式部署
  web1: &web
    image: my-web-app:latest
    container_name: web1
    ports:
      - "5000:80"
    networks:
      default:
        ipv4_address: 172.18.1.10
    depends_on:
      - database
      - redis
      # - nginx
      - kafka
 
  # web2:
  #   <<: *web
  #   container_name: web2
  #   ports:
  #     - "5001:80"
  #   depends_on:
  #     - database
  #     - redis
  #     - nginx
  #     - kafka
  #   networks:
  #     default:
  #       ipv4_address: 172.18.1.11
      
  consumer: &consumer
    image: my-consumer-app:latest
    container_name: consumer
    networks:
      default:
        ipv4_address: 172.18.1.12
    depends_on:
      - database
      - kafka
      - web1
      # - web2
    
  database:
    image: mysql:8.4.3
    container_name: mysql
    mem_limit: 355m
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db
      TZ: Asia/Shanghai
      MYSQL_CHARACTER_SET_SERVER: utf8
    ports:
      - "3306:3306"
    volumes:
      - ./docker_volumn/mysql:/var/lib/mysql
      - ./docker_volumn/conf.d:/etc/mysql/conf.d # 減少內存
    networks:
      default:
        ipv4_address: 172.18.1.2

  redis:
    image: redis:latest
    container_name: redis
    mem_limit: 64m
    ports:
      - "6379:6379"
    # volumes:
    #   - ./docker_volumn/redis:/data
    networks:
      default:
        ipv4_address: 172.18.1.3

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   networks:
  #     default:
  #       ipv4_address: 172.18.1.4

  # phpmyadmin:
  #   image: phpmyadmin:latest
  #   container_name: myadmin
  #   environment:
  #     PMA_ARBITRARY: 1
  #   ports:
  #     - "13308:80"
  #   networks:
  #     default:
  #       ipv4_address: 172.18.1.5

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    mem_limit: 128m
    restart: always
    ports:
      - '2181:2181'
    environment:
      # 匿名登录--必须开启
      - ALLOW_ANONYMOUS_LOGIN=yes
    # Kafka 客户端在连接 Broker 的时候，Broker 将客户端发来的请求附加信息与 Broker 启动时上报给 Zookeeper 的 listeners参数信息、host（来自listeners的中间域名或主机名部分）、port (来自listeners的端口部分) 进行了验证，认证通过建立连接执行请求
    extra_hosts:
      - "kafka:127.0.0.1"
    networks:
      default:
        ipv4_address: 172.18.1.6

  kafka:
    image: 'bitnami/kafka:2.8.0'
    container_name: kafka
    mem_limit: 355m
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      # 客户端访问地址，更换成自己的
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://172.18.1.7:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      # 允许使用PLAINTEXT协议(镜像中默认为关闭,需要手动开启)
      - ALLOW_PLAINTEXT_LISTENER=yes
      # 單節點叢集，預設為 3
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      # 全局消息过期时间 6 小时(测试时可以设置短一点)
      - KAFKA_CFG_LOG_RETENTION_HOURS=1
      # 设置broker最大内存，和初始内存
      - KAFKA_HEAP_OPTS=-Xms128m -Xmx512m
    # volumes:
    #   - ./docker_volumn/kafka/data:/bitnami/kafka/data
    depends_on:
      - zookeeper
    networks:
      default:
        ipv4_address: 172.18.1.7

  # kafka_manager:
  #   image: 'hlebalbau/kafka-manager:latest'
  #   container_name: kafka_manager
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     ZK_HOSTS: "zookeeper:2181"
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   networks:
  #     default:
  #       ipv4_address: 172.18.1.8
        
  